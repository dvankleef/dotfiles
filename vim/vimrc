" Set highlighting on"
:syntax on

set nocompatible              " be iMproved, required
filetype off                  " required

set shell=/bin/bash

" Conceals javascript functions to f
set cole=2
let g:javascript_conceal = 1

" Redraw after performing script
set lazyredraw

" Auto-reload modified files (with no local changes)
set autoread

" Turn off backup and swap files
set nobackup
set nowritebackup
set noswapfile

" Incasesensitive search
set incsearch
set ignorecase

" Huh? what is this again?
let javascript_enable_domhtmlcss = 1

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
call vundle#begin('~/dev/dotfiles/vim/.vim/bundle')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim' " Package manager
Plugin 'tyru/open-browser.vim' " Open link with CTRL G
Plugin 'bling/vim-airline' " Nice statusbar
Plugin 'Shutnik/jshint2.vim' " Correct me on my javascript syntax
Plugin 'flazz/vim-colorschemes' " I can haz colors?
Plugin 'pangloss/vim-javascript' " Proper javascript syntax highlighting
Plugin 'plasticboy/vim-markdown' " Bowdown bitches for my markdown [1]
Plugin 'esneider/YUNOcommit.vim' " commit reminder for vim
Plugin 'reedes/vim-lexical' " Spell-checks for writing
Plugin 'reedes/vim-colors-pencil' "Colorscheme for writing
Plugin 'reedes/vim-wordy' " Uncover usage problems in your writing
Plugin 'tpope/vim-fugitive' " Git on stereoids, well known to be awesome
Plugin 'kien/rainbow_parentheses.vim' " Rainbow parantheses highlighting
Plugin 'groenewege/vim-less' " Highlighting for less
Plugin 'scrooloose/nerdtree' " Folder viewing
Plugin 'scrooloose/syntastic' " Syntax error, with options to follow styleguides
Plugin 'shime/livedown' " Live markdown previen, lets test it!
Plugin 'digitaltoad/vim-jade' " highlight jade
Plugin 'tommcdo/vim-fugitive-blame-ext' "  Show commit messages in Gblame
Plugin 'tpope/vim-surround' " why didn't I use this one earlier? Nice tool to add/remove/change delimeters around strings
Plugin 'tpope/vim-repeat' " Allows vim-surround to repeat itself with the . command
Plugin 'tpope/vim-speeddating' " In/De-crement dates/time and more with CTRL-A/CTRL-X
Plugin 'godlygeek/tabular' " Serious hotness when needing to tab some stuff nicely, such as dicts or tables
Plugin 'airblade/vim-gitgutter' " Show +/- signs in front of the lines based on the git diff
Plugin 'mattboehm/vim-accordion' " Cool way to split windows
Plugin 'rondale-sc/vim-spacejam' " Auto remove whitespace
Plugin 'othree/html5.vim' " Don't freak out on HTML5 tags. OK?!!!
Plugin 'idanarye/vim-merginal' " Make git merging easier, run with :Merginal
Plugin 'koron/nyancat-vim' " just to shut down the emacs users [2]
Plugin 'jaxbot/browserlink.vim' " Live update with browser and sync between inspect element
Plugin 'reedes/vim-textobj-sentence' " Better sententce hopping with ( and )
"Plugin 'jaxbot/github-issues.vim' " Acted annoying with bad networks. Blocked
"the entire git commit flow.
"Plugin 'msanders/snipmate.vim' " Didn't work for most items. Didn't want to
"fine tune. Auto complete snippets, like type: for<tab> and it will give you a for loop
"Plugin 'Facebook/vim-flow.git' " Static typing in javascript <- didn't work so smooth. Basically copied the flow output to the buffer when saving a file
"Plugin 'marijnh/tern_for_vim' < what is this again?
"Plugin 'tpope/vim-unimpaired' " Tpope is a fucking hero, somebody please enlighten me what this thing does?
"Plugin 'skammer/vim-css-color' " #slow Gives colors in CSS a nice example
"Plugin 'teddywing/auditory.vim' "Sound effects! VERY ANNOYING!!!
"Plugin 'Valloric/YouCompleteMe'
"commented out because it was not compatible
"with my vim installation
"Plugin 'Raimondi/delimitMate' was very annoying, didn't allow me to delete
"the characters
"Plugin 'chrisbra/csv.vim' Didn't work so well, check it out again
"Plugin 'reedes/vim-wheel' " Make scrollwheel scroll vim. Didn't work on osx
"Plugin 'nathanaelkane/vim-indent-guides'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" Make F2 a button to toggle pastemode
set pastetoggle=<F2>

" Highlight the current line"
:set cursorline
set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " a ruler on steroids

set ff=unix

set history=1000                " Store a ton of history (default is 20)
set nu                          " Line numbers on
set showmatch                   " show matching brackets/parenthesis
"set hlsearch                    " highlight search terms
set scrolljump=5                " lines to scroll when cursor leaves screen

set relativenumber
set number

colorscheme candy
" for writing, use calmar-256-light

" Key (re)Mappings {
    let mapleader = ','

    " Easier moving in tabs and windows
    map <C-J> <C-W>j<C-W>_
    map <C-K> <C-W>k<C-W>_
    map <C-L> <C-W>l<C-W>_
    map <C-H> <C-W>h<C-W>_

    " Shortcuts
    " Change Working Directory to that of the current file
    "cmap cwd lcd %:p:h
    "cmap cd. lcd %:p:h
    lcd %:p:h

    map <leader>ff :999winc ><CR>

    " visual shifting (does not exit Visual mode)
    vnoremap < <gv
    vnoremap > >gv

    "Open selected link
    nmap gx <Plug>(openbrowser-smart-search)
    vmap gx <Plug>(openbrowser-smart-search)

    " fix my js with the leader+k command
    map <Leader>k ;execute ":w !fixmyjs " . expand("%")<CR>:edit<CR>

    " Map jj to ESC, #experimental - i hope to downcrease my hand movement to
    " the esc key
    " I mapped this to hh because Its right under my index finger in dvorak.
    inoremap hh <ESC>

    " jshint validation
    nnoremap <silent><F5> :JSHint<CR>
    inoremap <silent><F5> <C-O>:JSHint<CR>
    vnoremap <silent><F5> :JSHint<CR>

    " show next jshint error
    nnoremap <silent><F6> :lnext<CR>
    inoremap <silent><F6> <C-O>:lnext<CR>
    vnoremap <silent><F6> :lnext<CR>

    " show previous jshint error
    nnoremap <silent><F7> :lprevious<CR>
    inoremap <silent><F7> <C-O>:lprevious<CR>
    vnoremap <silent><F7> :lprevious<CR>

" }

"


" Formatting {
    :set nowrap                      " wrap long lines

    " uncommented to use default text editing settings
    :set smartindent
    :set tabstop=4
    " The settings for indentaion
    :set shiftwidth=4
    :set expandtab

    "set autoindent                  " indent at the same level of the previous line
    "set shiftwidth=4                " use indents of 4 spaces
    "set expandtab                   " tabs are spaces, not tabs
    "set tabstop=4                   " an indentation every four columns
    "set softtabstop=4               " let backspace delete indent
" }

" Indent guides {
    "let g:indent_guides_start_level = 2
    "let g:indent_guides_guide_size = 1
    "let g:indent_guides_enable_on_vim_startup = 1

    "let g:indent_guides_auto_olors = 0
    "autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red   ctermbg=3
    "autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4
"" }

"" Fugitive {
    "nnoremap <silent> <leader>gs :Gstatus<CR>
    "nnoremap <silent> <leader>gd :Gdiff<CR>
    "nnoremap <silent> <leader>gc :Gcommit<CR>
    "nnoremap <silent> <leader>gb :Gblame<CR>
    "nnoremap <silent> <leader>gl :Glog<CR>
    "nnoremap <silent> <leader>gp :Git push<CR>
""}

if has('statusline')
    set laststatus=2

    " Broken down into easily includeable segments
    set statusline=%<%f\    " Filename
    set statusline+=%w%h%m%r " Options
    if has('fugitive')
        set statusline+=%{fugitive#statusline()} "  Git Hotness
    endif
    set statusline+=\ [%{&ff}/%Y]            " filetype
    "set statusline+=\ [%{getcwd()}]          " current dir
    set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
endif

set t_Co=256
let g:airline_theme = "kolor"

" Highlight parantheses
set showmatch

" Markdown highlighting {
    let g:vim_markdown_folding_disabled=1
"}

" Spell checker settings
augroup lexical
    autocmd!
    " Only spellcheck text files, checking on code will make everything slow
    autocmd FileType text,markdown,mkd call lexical#init()
    autocmd FileType textile call lexical#init()
    autocmd FileType text call lexical#init({ 'spell': 0 })

    " Define thesaurus dictionary
    let g:lexical#thesaurus = ['~/dev/thesaurus/mthesaur.txt',]

    " Lookup the word in thesaurus
    let g:lexical#thesaurus_key = '<leader>t'


    " Add more languages
    let g:lexical#spelllang = ['en_us', 'en_ca', 'nl']

augroup END

"augroup Filetype markdown
    "" set linebreak on
    ":set wrap                      " wrap long lines
    "" Disable cursorline. When writing long texts on line this will be very annoying
    ":set nocursorline
"augroup END

" Highlight text longer than 79 characters to prevent long lines
"highlight OverLength ctermbg=red ctermfg=white guibg=#592929
"match OverLength /\%81v.\+/

:set tw=79



" Rainbow parathesees highlighing
    au VimEnter * RainbowParenthesesToggle
    au Syntax * RainbowParenthesesLoadRound
    au Syntax * RainbowParenthesesLoadSquare
    au Syntax * RainbowParenthesesLoadBraces


"====[ Make the 81st column stand out ]====================
    highlight ColorColumn ctermbg=magenta
    call matchadd('ColorColumn', '\%81v', 100)

"====[ Highlight the relative line numbers gray / yellow ]=
    highlight LineNr ctermfg=238 ctermbg=0
    highlight CursorLineNr ctermfg=gray ctermbg=0

"====[ Make tabs, trailing whitespace, and non-breaking spaces visible ]======
    exec "set listchars=tab:\uBB\uBB,trail:\uB7,nbsp:~"
    set list

"====[ Swap : and ; to make colon commands easier to type ]======
    nnoremap  ;  :
    nnoremap  :  ;

"====[ Shorthand to toggle a list to a sentence, or in reverse ]======
    nmap <leader>l   :call ListTrans_toggle_format()<CR>
    vmap <leader>l   :call ListTrans_toggle_format('visual')<CR>

"====[ Better digraph interactions ]======
    inoremap <expr> <C-K> HUDG_GetDigraph()

"====[ math on visual regions ]======
    " Mapped to the vmath plugin
    vmap <expr> <leader>+ VMATH_YankAndAnalyse()
    nmap        <leader>+ vip++

"====[ make the gitgutter colors look nice ]======
    highlight clear SignColumn

"====[ Drag block selection around with arrow keys ]======
    vmap <expr> <LEFT> DVB_Drag('left')
    vmap <expr> <RIGHT> DVB_Drag('right')
    vmap <expr> <DOWN> DVB_Drag('down')
    vmap <expr> <UP> DVB_Drag('up')

    " Use D to duplicate a block
    vmap <expr> D DVB_Duplicate()

"====[ Underline badly spelled words ]======
    hi SpellBad  term=reverse cterm=undercurl gui=undercurl guisp=NONE ctermbg=NONE

" Footnotes
" [1] I don't think much geeks will get this joke. But I'm referring to beyonce
" here: https://www.youtube.com/watch?v=IyuUWOnS9BY
" [2] http://nyan-mode.buildsomethingamazing.com/
